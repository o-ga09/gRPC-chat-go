// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package usecase

import (
	"context"
	"gRPC-chat/api/domain"
	"sync"
)

// Ensure, that InputPortMock does implement InputPort.
// If this is not the case, regenerate this file with moq.
var _ InputPort = &InputPortMock{}

// InputPortMock is a mock implementation of InputPort.
//
//	func TestSomethingThatUsesInputPort(t *testing.T) {
//
//		// make and configure a mocked InputPort
//		mockedInputPort := &InputPortMock{
//			PublishFunc: func(contextMoqParam context.Context, message domain.Message) domain.MessageStatus {
//				panic("mock out the Publish method")
//			},
//			SubscribeFunc: func(contextMoqParam context.Context, message domain.Message) domain.MessageStatus {
//				panic("mock out the Subscribe method")
//			},
//		}
//
//		// use mockedInputPort in code that requires InputPort
//		// and then make assertions.
//
//	}
type InputPortMock struct {
	// PublishFunc mocks the Publish method.
	PublishFunc func(contextMoqParam context.Context, message domain.Message) domain.MessageStatus

	// SubscribeFunc mocks the Subscribe method.
	SubscribeFunc func(contextMoqParam context.Context, message domain.Message) domain.MessageStatus

	// calls tracks calls to the methods.
	calls struct {
		// Publish holds details about calls to the Publish method.
		Publish []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Message is the message argument value.
			Message domain.Message
		}
		// Subscribe holds details about calls to the Subscribe method.
		Subscribe []struct {
			// ContextMoqParam is the contextMoqParam argument value.
			ContextMoqParam context.Context
			// Message is the message argument value.
			Message domain.Message
		}
	}
	lockPublish   sync.RWMutex
	lockSubscribe sync.RWMutex
}

// Publish calls PublishFunc.
func (mock *InputPortMock) Publish(contextMoqParam context.Context, message domain.Message) domain.MessageStatus {
	if mock.PublishFunc == nil {
		panic("InputPortMock.PublishFunc: method is nil but InputPort.Publish was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Message         domain.Message
	}{
		ContextMoqParam: contextMoqParam,
		Message:         message,
	}
	mock.lockPublish.Lock()
	mock.calls.Publish = append(mock.calls.Publish, callInfo)
	mock.lockPublish.Unlock()
	return mock.PublishFunc(contextMoqParam, message)
}

// PublishCalls gets all the calls that were made to Publish.
// Check the length with:
//
//	len(mockedInputPort.PublishCalls())
func (mock *InputPortMock) PublishCalls() []struct {
	ContextMoqParam context.Context
	Message         domain.Message
} {
	var calls []struct {
		ContextMoqParam context.Context
		Message         domain.Message
	}
	mock.lockPublish.RLock()
	calls = mock.calls.Publish
	mock.lockPublish.RUnlock()
	return calls
}

// Subscribe calls SubscribeFunc.
func (mock *InputPortMock) Subscribe(contextMoqParam context.Context, message domain.Message) domain.MessageStatus {
	if mock.SubscribeFunc == nil {
		panic("InputPortMock.SubscribeFunc: method is nil but InputPort.Subscribe was just called")
	}
	callInfo := struct {
		ContextMoqParam context.Context
		Message         domain.Message
	}{
		ContextMoqParam: contextMoqParam,
		Message:         message,
	}
	mock.lockSubscribe.Lock()
	mock.calls.Subscribe = append(mock.calls.Subscribe, callInfo)
	mock.lockSubscribe.Unlock()
	return mock.SubscribeFunc(contextMoqParam, message)
}

// SubscribeCalls gets all the calls that were made to Subscribe.
// Check the length with:
//
//	len(mockedInputPort.SubscribeCalls())
func (mock *InputPortMock) SubscribeCalls() []struct {
	ContextMoqParam context.Context
	Message         domain.Message
} {
	var calls []struct {
		ContextMoqParam context.Context
		Message         domain.Message
	}
	mock.lockSubscribe.RLock()
	calls = mock.calls.Subscribe
	mock.lockSubscribe.RUnlock()
	return calls
}
